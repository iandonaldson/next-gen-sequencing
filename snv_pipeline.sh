#!/usr/bin/bash


#Begin of pipeline

#For testing purpose, two paired-end fastq files R1 and R2 were generated by pIRS (http://code.google.com/p/pirs/)
#and only chr1 of hg19 was used as reference genome
#pIRS (profile based Illumina pair-end Reads Simulator) is developed for de novo data simulation. It uses empirical distribution to reproduce Illumina pair-end reads with real distribution of substitution sequencing errors, quality values and GC%-depth bias. 

#

cd ~
mkdir -p ngs/snv_pipeline_demo
cd ngs/snv_pipeline_demo
REF_GENOME=~/ngs/reference/hg38/chr22.fa
REF_GENOME=~/ngs/reference/hg38/22.fa
SEQ_NAME=chr22 #used to name output files
KNOWN_SNPS=~/ngs/resources/All.known.human.snps.hg38.vcf


#0.1 create simulated PE Reads on 50x coverage
# see pirs simulate -h
# -l read-length
# -x coverage
# -Q Set the ASCII shift of the quality value (usually 64 or 33 for Illumina data).  Default: 33
# -o output prefix
pirs simulate \
-B $PIRS/Profiles/Base-Calling_Profiles/humNew.PE100.matrix.gz \
-G $PIRS/Profiles/GC-depth_Profiles/humNew.gcdep_200.dat \
-I $PIRS/Profiles/InDel_Profiles/phixv2.InDel.matrix \
-l 100 -x 50 -Q 33 -o A \
$REF_GENOME

#see how much disk space this consumes
du -Sh

#references for fastq files
R1=A_100_180_1.fq
R2=A_100_180_2.fq

#0.2 build genome index for BWA - this is done as part of reference.sh
#five index files are created that will be used by bwa
#chr22.fa.amb
#chr22.fa.ann
#chr22.fa.bwt
#chr22.fa.pac
#chr22.fa.sa

#1. align with BWA
# man bwa align
# -t number of threads to use
# -R Complete read group header line. '\t' can be used in STR and will be converted to a TAB in  the  output  SAM.
#    The read group ID will be attached to every read in the output. An example is '@RG\tID:foo\tSM:bar'

START=$(date +%s.%N)
bwa mem -t 4 -R '@RG\tID:group_id\tPL:illumina\tSM:sample_id' $REF_GENOME ${R1} ${R2} > A.$SEQ_NAME.sam
END=$(date +%s.%N)
DIFF=$(echo "$END - $START" | bc)
echo $DIFF
#1032 seconds = 17 minutes
head A.$SEQ_NAME.sam
#read about the format of this file here: http://samtools.github.io/hts-specs/SAMv1.pdf

#2. sort sam file alignments by coordinates and convert to bam file using PICARD
#   - this sorting is expected by a downstream step (remove PCR duplicates)
java -jar $PICARD SortSam -h #for SortSam options
# INPUT - the input file
# OUTPUT - the output file
#SORT_ORDER - of the output file {unsorted, queryname, coordinate}
java -jar $PICARD SortSam -H #for picard in general options
# CREATE_INDEX - whether to create a BAM index when writing a coordinate-sorted BAM file.
# VALIDATION_STRINGENCY - Validation stringency for all SAM files read by this program.  Setting stringency to 
#                         SILENT can improve performance when processing a BAM file in which variable-length data 
#                         (read, qualities, tags) do not otherwise need to be decoded.  Default value: STRICT. 
#                         This option can be set to 'null' to clear the default value. 
#                         Possible values: {STRICT, LENIENT, SILENT} 

START=$(date +%s.%N)
java -Xmx2g -Djava.io.tmpdir=/tmp -jar $PICARD SortSam \
CREATE_INDEX=True \
SORT_ORDER=coordinate \
VALIDATION_STRINGENCY=LENIENT \
INPUT=A.$SEQ_NAME.sam \
OUTPUT=A.$SEQ_NAME.sort.bam 1>sortsam.log 2>sortsam.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
# 7 minutes - time is also in error log

#3. remove PCR duplicates using PICARD
# this step finds paired-end reads that have the same 5' end-locations (PCR duplicates) and removes duplicates
# keeping the read with the best sequence quality
# also see http://broadinstitute.github.io/picard/faq.html 
START=$(date +%s.%N)
java -Xmx2g -Djava.io.tmpdir=/tmp -jar $PICARD MarkDuplicates \
CREATE_INDEX=true \
REMOVE_DUPLICATES=True \
ASSUME_SORTED=True \
VALIDATION_STRINGENCY=LENIENT \
METRICS_FILE=/dev/null \
INPUT=A.$SEQ_NAME.sort.bam \
OUTPUT=A.$SEQ_NAME.sort.dedup.bam 1>markdups.log 2>markdups.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
# 7 minutes


#4. fix mate information using PICARD
#Ensure that all mate-pair information is in sync between each read and its mate pair.  If no OUTPUT file is supplied then the output is written to a temporary file and then copied over the INPUT file.  Reads marked with the secondary alignment flag are written to the output file unchanged.
START=$(date +%s.%N)
java -Djava.io.tmpdir=/tmp/ -jar $PICARD FixMateInformation \
SO=coordinate \
VALIDATION_STRINGENCY=LENIENT \
CREATE_INDEX=true \
INPUT=A.$SEQ_NAME.sort.dedup.bam \
OUTPUT=A.$SEQ_NAME.sort.dedup.mate.bam 1>fixmate.log 2>fixmate.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
# 9 minutes


###
#5. local alignment around indels. 
#  - first use the Realigner TargetCreator to create a list of suspicious regions
#    where multiple alignments with the reference have poor quality - candidates for indels
#  - this list will be used in the next step
#  - to get help for GATK tools in general
# java -jar $GATK -h
#  - for a specific tool in general use
java -jar $GATK -T RealignerTargetCreator -h
# and also  links provided on these man pages to online docs like
# https://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_indels_RealignerTargetCreator.php
#
# -T tool (type of analysis)
# -R reference genome
# -I input file
# -o output file
# it is also possible to pass a VCF file of known indels to this tool
START=$(date +%s.%N)
java -Xmx2g -jar $GATK \
-R $REF_GENOME \
-T RealignerTargetCreator \q
-I A.$SEQ_NAME.sort.dedup.mate.bam \
-o A.intervals 1>realignt.log 2>realignt.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#4 min

#finaly - run the realigner using the generated intervals file
START=$(date +%s.%N)
java -Xmx2g -jar $GATK \
-R $REF_GENOME \
-T IndelRealigner \
-targetIntervals A.intervals \
-I A.$SEQ_NAME.sort.dedup.mate.bam \
-o A.$SEQ_NAME.sort.dedup.mate.realign.bam 1>real.log 2>real.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#

###
#6. base recalibration
# 
# - given a list of known SNPs listed in vcf format, re-examine the alignment file
# - assume that any mismatch that is not a known SNP is in fact a sequencing error
# - based on this, re-calculate the error rate and adjust the alignment quality scores
# - below we use dbSNP141 (see setup) to represent known SNPs
# - but you might also use a SNP dataset for a specific population from a 1000G project 
# getting help 
java -jar $GATK -T BaseRecalibrator -h 
#and
#http://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_bqsr_BaseRecalibrator.php
#note: the parameter '-nct 4' can be used to set the number of cpu threads per data thread
#note: the first line in the reference genome file (chr22.fa)
#causes the contig name 'chr22' to be used throughout the index for this reference
#but the known SNPs file lists chromosomes as 1...22, X,Y,M and so the BaseRecalibrator does notrecognize 
#matching contigs between the referene and the known SNP file
#so i did this
START=$(date +%s.%N)
zgrep -E "^#{1,2}" All.known.human.snps.hg38.vcf.gz > tmp
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#74 s
START=$(date +%s.%N)
zgrep -E "^22" All.known.human.snps.hg38.vcf.gz >> tmp
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#74 s
sed 's/^22/chr22/' < tmp > tmp2
mv tmp2 All.known.human.snps.hg38.22.vcf
rm tmp

#how long does it tke to zip and unzip


START=$(date +%s.%N)
gunzip All.known.human.snps.hg38.vcf.gz 2GB -> 16GB !!
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#132 

START=$(date +%s.%N)
grep -E "^22" All.known.human.snps.hg38.vcf >> tmp
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
# 147 - so zgrep wins

START=$(date +%s.%N)
gzip All.known.human.snps.hg38.vcf # 16GB -> 2 GB !!
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
# 435


REF_GENOME=~/ngs/reference/hg38/chr22.fa
KNOWN_SNPS=~/ngs/resources/All.known.human.snps.hg38.22.vcf

START=$(date +%s.%N)
java -Xmx2g -jar $GATK \
-R $REF_GENOME \
-T BaseRecalibrator \
-knownSites $KNOWN_SNPS \
-o A.recal \
-I A.$SEQ_NAME.sort.dedup.mate.realign.bam 1>recal.log 2>recal.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#1476 s = 24 min


java -jar $GATK -T PrintReads -h 
#http://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_bqsr_BaseRecalibrator.php
# - the recalibration file generated in the last step is passed to the PrintReads tool using the BSQR command line parameter

START=$(date +%s.%N)
java -Xmx2g -jar $GATK \
-R $REF_GENOME \
-T PrintReads \
-BQSR A.recal \
-o A.$SEQ_NAME.sort.dedup.mate.realign.recal.bam \
-I A.$SEQ_NAME.sort.dedup.mate.realign.bam 1>rewrite.log 2>rewrite.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#1880 s = 31 min



###
# call variants with GATK's UnifiedGenotyper 
# - This tool has been deprecated in favor of HaplotypeCaller, a much more sophisticated variant caller that produces much better calls, especially on indels, and includes features that allow it to scale to much larger cohort sizes.
# - The caller can be very aggressive in calling variants in order to be very sensitive, so the raw output will contain many false positives. We use extensive post-calling filters to eliminate most of these FPs. See the documentation on filtering (especially by Variant Quality Score Recalibration) for more details.

# -D (--dbsnp file)
# -glm (--genotype-likelihoods-model).  Genotype likelihoods calculation model to employ -- SNP is the default option, while INDEL is also available for calling indels and BOTH is available for calling both together
# -metrics produces a metrics file - see GATK global params
# -stand_call_conf - The minimum phred-scaled confidence threshold at which variants should be called.
# -stand_emit_conf - The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold)
# -o output file name
# -I input file name

java -jar $GATK -T UnifiedGenotyper -h 

START=$(date +%s.%N)
java -Xmx2g -jar $GATK \
-R $REF_GENOME \
-T UnifiedGenotyper \
-glm BOTH \
-D $KNOWN_SNPS \
-metrics A.snps.metrics \
-stand_call_conf 50.0 \
-stand_emit_conf 10.0 \
-o A.ug.vcf \
-I A.$SEQ_NAME.sort.dedup.mate.realign.recal.bam 1>ugcaller.log 2>ugcaller.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#809 s = 13 min

###
#call variants with GATK's HaplotypeCaller 
# see notes on args for UnifiedGenotyper caller above
java -jar $GATK -T HaplotypeCaller -h
START=$(date +%s.%N)
java -Xmx2g -jar $GATK \
-R $REF_GENOME \
-T HaplotypeCaller \
--dbsnp $KNOWN_SNPS \
-stand_call_conf 50.0 \
-stand_emit_conf 10.0 \
-o A.hc.vcf \
-I A.$SEQ_NAME.sort.dedup.mate.realign.recal.bam 1>hcaller.log 2>hcaller.loge
END=$(date +%s.%N); DIFF=$(echo "$END - $START" | bc); echo $DIFF
#944 s = 15 min

exit 0;


#End of pipeline
################################

#An easier way to document scripts using here documents


#!/bin/sh
case $1 in (*-h*)
sed '/^:/,/^DOC/!d;s/^:/cat/' "$0" |sh -s "$@"
exit;;esac
: <<DOC
Enter as many lines of documentation as you might need - 
just don't begin any but the first with : or the last with DOC. 
"Quotes are " fine - and $params can be expanded if you 
don't quote the DOC delimiter.
DOC
... #shell script
... #more of same
: <<\DOC
- *Markdown Comment* -
    - or you can quote the delimiter and be more 
     free to use `backquotes` or whatever you like. 
     You can mark the comments up in markdown 
     in the first place, and print them w/ `"$0" -h`.
DOC

